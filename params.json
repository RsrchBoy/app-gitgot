{"name":"got","body":"# DESCRIPTION\r\n\r\n`got` is a script to make it easier to manage all the version controlled\r\nrepositories you have on all the computers you use. It can operate on all,\r\nsome, or just one repo at a time, to both check the status of the repo (up to\r\ndate, pending changes, dirty, etc.) and sync it with any upstream master.\r\n\r\ngot also supports forking a GitHub repo and adding it to the list of managed\r\nrepositories.\r\n\r\n# SYNOPSIS\r\n\r\n    cd some/proj/in/a/vcs\r\n\r\n    got add\r\n    # answer prompts for various information\r\n    # or run with '-D' to take all defaults\r\n\r\n    # show managed repositories\r\n    got list\r\n    got ls\r\n\r\n    # show managed repositories sorted by path (default = sort by name)\r\n    got ls -p\r\n\r\n    # remove repo #1 from the list\r\n    got remove 1\r\n\r\n    # remove repo named 'bar' from the list\r\n    got remove bar\r\n\r\n    # remove all repos tagged 'foo' without confirmation prompts\r\n    got rm -f -t foo\r\n\r\n    # remove repo #3 without confirmation prompts and be noisy about it\r\n    got rm -f -v 3\r\n\r\n    # show status (up-to-date, dirty, etc.) for all repos\r\n    got status\r\n\r\n    # show status for repo #3\r\n    got st 3\r\n\r\n    # update all repos with configured remotes\r\n    got update\r\n\r\n    # update repo named 'bar'\r\n    got up bar\r\n\r\n    # Note: if a repo is in the list but doesn't have a local checkout, 'got\r\n    # update' will create directories as needed and do the initial check out.\r\n\r\n    # fork a github repo and add it to your list of repos\r\n    got fork https://github.com/somebodies/repo_name\r\n\r\n    # note: this doesn't actually check out the repo, but running 'got up\r\n    # repo_name' will work as described above.\r\n\r\n    # also note: the default path to a repo added via 'fork' is a directory\r\n    # named 'repo_name' in the current working directory\r\n\r\n    # open a subshell with working directory set to 'path' of repo #1\r\n    got chdir 1\r\n\r\n    # fork a subshell with working directory set to 'path' of repo foo\r\n    got cd foo\r\n\r\n    # show version of got\r\n    got version\r\n\r\n# OPTIONS\r\n\r\nIn addition to the subcommand-specific options illustrated in the SYNOPSIS,\r\nall the subcommands accept the following options:\r\n\r\n- `--verbose / -v`\r\n\r\nBe more verbose about what is happening behind the scenes\r\n\r\n- `--quiet / -q`\r\n\r\nBe more quiet\r\n\r\n- `--tags / -t`\r\n\r\nSelect all repositories that have the given tag. May be given multiple\r\ntimes. Multiple args are (effectively) 'and'-ed together.\r\n\r\n- `--no-color / -C`\r\n\r\nSuppress colored output\r\n\r\n- `--color-scheme / -c`\r\n\r\nSpecify a color scheme. Defaults to 'dark'. People using light backgrounds may\r\nwant to specify \"-c light\".\r\n\r\nThe name given to the option indicates a library to load. By default this\r\nlibrary is assumed to be in the 'App::GitGot::Outputter::' namespace; the\r\ngiven scheme name will be appended to that namespace. You can load something\r\nfrom a different namespace by prefacing a '+'. (E.g., '-C +GitGot::pink' will\r\nattempt to load 'GitGot::pink'.)\r\n\r\nIf the requested module can't be loaded, the command will exit.\r\n\r\nSee COLOR SCHEMES for details on how to write your own custom color scheme.\r\n\r\n- repo name, repo number, range\r\n\r\nCommands may be limited to a subset of repositories by giving a combination of\r\nadditional arguments, consisting of either repository names, repository\r\nnumbers (as reported by the '`list`' subcommand), or number ranges (e.g., `2-4`\r\nwill operate on repository numbers 2, 3, and 4).\r\n\r\nNote that if you have a repository whose name is an integer number, bad things\r\nare going probably going to happen. Don't do that.\r\n\r\n# COLOR SCHEMES\r\n\r\nColor scheme libraries should extend `App::GitGot::Outputter` and need to\r\ndefine four required attributes: `color_error`, `color_warning`,\r\n`color_major_change`, and `color_minor_change`. Each attribute should be a\r\nread-only of type 'Str' with a default value that corresponds to a valid\r\n`Term::ANSIColor` color string.\r\n\r\n# SEE ALSO/CREDITS\r\n\r\n- [http://github.com/ingydotnet/app-aycabtu-pm/](http://github.com/ingydotnet/app-aycabtu-pm/)\r\n\r\nSeeing Ingy d√∂t Net speak about AYCABTU at PPW2010 was a major factor in the\r\ndevelopment of this script -- earlier (unreleased) versions did not have any way\r\nto limit operations to a subset of managed repositories; they also didn't deal\r\nwell managing output. After lifting his interface (virtually wholesale) I\r\nended up with something that I thought was worth releasing.\r\n\r\n- [http://www.leancrew.com/all-this/2010/12/batch-comparison-of-git-repositories/](http://www.leancrew.com/all-this/2010/12/batch-comparison-of-git-repositories/)\r\n\r\ndrdrang prodded me about making the color configuration more friendly to those\r\nthat weren't dark backrgound terminal people. The colors in\r\n`App::GitGot::Outputter::light` are based on a couple of patches that drdrang\r\nsent me.\r\n\r\n- [The Wire](http://en.wikipedia.org/wiki/The\\_Wire)\r\n\r\n# LIMITATIONS\r\n\r\nCurrently git is the only supported VCS.","tagline":"A tool to make it easier to manage multiple code repositories using different VCSen","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}